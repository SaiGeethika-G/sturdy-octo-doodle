1833. Maximum Ice Cream Bars

It is a sweltering summer day, and a boy wants to buy some ice cream bars.

At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins to spend, and he wants to buy as many ice cream bars as possible. 

Return the maximum number of ice cream bars the boy can buy with coins.

Note: The boy can buy the ice cream bars in any order.

Example 1:

Input: costs = [1,3,2,4,1], coins = 7
Output: 4
Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.
Example 2:

Input: costs = [10,6,8,7,7,8], coins = 5
Output: 0
Explanation: The boy cannot afford any of the ice cream bars.
Example 3:

Input: costs = [1,6,3,1,2,5], coins = 20
Output: 6
Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.
 
Constraints:

costs.length == n
1 <= n <= 105
1 <= costs[i] <= 105
1 <= coins <= 108

Approach:
As the maximum ice cream bar count is required, we need to purchase the ice cream bars at a lower cost. Sort the costs and iterate over the sorted vector to check whether the ice cream bar can be purchased. If it can be purchased, then decrement the coins else we can break out of the loop as no ice cream bars can be purchased any further.

SC: O(1)
TC: O(NlogN)

Code(C++):

class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        sort(costs.begin(),costs.end());
        int count=0;
        for(int i=0;i<costs.size();i++){
            if(costs[i]<=coins){
                count++;
                coins-=costs[i];
            }
            else{
                break;
            }
        }
        return count;
    }
};

---------------------------------------------------------------------------------------------------------
 Approach 2:
 Optimize TC - We can use a vector of size N. Iterate over costs and maintain the count of each bar. Then, we iterate over this vector and count the bars at each cost if the cost is <= coins. Then we can restrict the bars to coins by counting how many bars of that cost can be accommodated with coins. by acc=coins/cost and we can add the coins that can be accommodated among current bars with given coins to our result.

 TC: O(N)
 SC: O(N) -- For vector

 Code(C++):

class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        vector<int> v(100001,0);
        for(int i=0;i<costs.size();i++){
            v[costs[i]]+=1;
        }
        int count=0,acc;
        for(int cost=1;cost<v.size();cost++){
            if(cost<=coins){
                acc=coins/cost;
                count+=min(acc,v[cost]);
                coins-=min(acc,v[cost])*cost;
            }
        }
        return count;
    }
};