144. Binary Tree Preorder Traversal

Given the root of a binary tree, return the preorder traversal of its nodes' values.

Example 1:

Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:

Input: root = []
Output: []

Example 3:

Input: root = [1]
Output: [1]

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Approach:
Parent -- left -- right  => Preorder
Use a vector by reference.
TC: O(N)
SC: O(N) -- Recursion stack

Code(C++) -(1) :
Pass by reference and function

class Solution {
public:
    void preOrder(TreeNode* root,vector<int> &v){
        if(root){
            v.push_back(root->val);
            preOrder(root->left,v);
            preOrder(root->right,v);
        }
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        preOrder(root,v);
        return v;
    }
};

---------------------------------------------------------------------------------------------------------
Code(C++) -(2) :
Without explicit function and global variable

class Solution {
public:
    vector<int> a;
    vector<int> preorderTraversal(TreeNode* root) {
        if(root==NULL){
            return a;
        }
        a.push_back(root->val);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
        return a;
    }
};



