2244. Minimum Rounds to Complete All Tasks

You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.
Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.
 
Constraints:

1 <= tasks.length <= 105
1 <= tasks[i] <= 109

Approach:
As the rounds are dependent on individual counts. Maintain them using dictionary. 
1 --> Not possible = -1
2 --> 2(1) + 3(0) = 1
3 --> 2(0) + 3(1) = 1

4 --> 2(2) + 3(0) = 2
5 --> 2(1) + 3(1) = 2
6 --> 2(0) + 3(2) = 2

7 --> 2(2) + 3(1) = 3
8 --> 2(1) + 3(2) = 3
9 --> 2(0) + 3(3) = 3

10 --> 2(2) + 3(2) = 4
11 --> 2(1) + 3(3) = 4
12 --> 2(0) + 3(4) = 4

So if ct==1 then -1, ct%3==0 then ct//3 else ct+2//3 because any excess value of 3 always lead to +1 round even if it is 1 or 2.

TC: O(N)
SC: O(N)

Code(Python):

class Solution(object):
    def minimumRounds(self, tasks):
        d={}
        ans=0
        for task in tasks:
            d[task]=d.get(task,0)+1
        print(d)
        for task,count in d.items():
            if(count==1):
                return -1
            ans+=(count+2)//3
        return ans

Code(C++):

class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        unordered_map<int,int> umap;
        for(int i=0;i<tasks.size();i++){
            if(umap.find(tasks[i])==umap.end()){
                umap[tasks[i]]=1;
            }
            else{
                umap[tasks[i]]++;
            }
        }
        int ans=0;
        for(auto it:umap){
            int val=it.second;
            if(val==1){
                return -1;
            }
            else if(val%3==0){
                ans+=val/3;
            }
            else{
                ans+=(val+2)/3;
            }
        }
        return ans;
    }
};