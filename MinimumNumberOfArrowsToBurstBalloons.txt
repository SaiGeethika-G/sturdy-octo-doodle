452. Minimum Number of Arrows to Burst Balloons

There are some spherical balloons taped onto a flat wall that represents the XY plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
Example 2:

Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
Example 3:

Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
 

Constraints:

1 <= points.length <= 105
points[i].length == 2
-231 <= xstart < xend <= 231 - 1

TC: O(NlogN) for sorting
SC: O(N) for vector

Approach:
Make a comparison between the intervals to know the intersection of two intervals. Arrange the intervals in A.O using custom sort based on first and second values in the interval which makes comparison by one go. Finally maintain a vector to store all the intersetion values in the vector by comparing each interval with cur interval of vector. The intersection interval comes by large,small of compared interval vals. Finally, the size of vector represents the non overlapping intervals which means the arrows required.

Code(C++):

class Solution {
public:
    bool static custsort(vector<int> &v1, vector<int> &v2){
        if(v1[0]==v2[0]){
            return v1[1]<v2[1];
        }
        return v1[0]<v2[0];
    }
    int findMinArrowShots(vector<vector<int>>& points) {
        sort(points.begin(),points.end(),custsort);
        vector<pair<int,int>> v;
        int cur=0;
        v.push_back(make_pair(points[0][0],points[0][1]));
        for(int ptr=1;ptr<points.size();ptr++){
            int p1=points[ptr][0],p2=points[ptr][1];
            int v1=v[cur].first,v2=v[cur].second;
            if((p1>=v1 && p1<=v2) || (p2>=v1 && p2<=v2)){
                v[cur].first=max(p1,v1);
                v[cur].second=min(p2,v2);
            }
            else{
                v.push_back(make_pair(p1,p2));
                cur++;
            }
        }
        return v.size();
    }
};

---------------------------------------------------------------------------------------------------------
Optimized Approach:
Reduce space complexity. As we are using v to track only the last i.e, cur interval, we can track only the by store in a pair and use that. instead of size of v, here we can use counter to increment when there is an update in cur.

Code(C++):

class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        int arrow=1;
        int last = points[0][1];

        sort(points.begin(),points.end());

        for(int i=0;i<points.size();i++){
            if(points[i][0]>last){
                arrow++;
                last = points[i][1];
            }
            else last = min(last, points[i][1]);
        }

        return arrow;
    }
};
